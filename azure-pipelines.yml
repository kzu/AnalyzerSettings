variables:
- group: Sleet
- name: Configuration
  value: Release

stages:

- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'windows-2019'
    steps:
    - checkout: self
      clean: true

    - task: MSBuild@1
      displayName: Build
      inputs:
        solution: AnalyzerSettings.sln
        configuration: $(Configuration)
        msbuildArguments: -r -p:PackageOutputPath=$(Build.ArtifactStagingDirectory)

    - task: PublishBuildArtifacts@1
      displayName: Upload
      condition: succeeded()
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)
        ArtifactName: package
        ArtifactType: Container

- stage: Deploy
  variables:
  - name: SleetVersion
    value: 2.3.33
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'windows-2019'
    environment: sleet
    strategy:
      runOnce:
        deploy:
          steps:
          - pwsh: |
             $anyinstalled = (dotnet tool list -g | select-string sleet) -ne $null
             Write-Host "##vso[task.setvariable variable=Sleet.AnyInstalled;]$anyinstalled"
   
             $sameinstalled = (dotnet tool list -g | select-string sleet | select-string $(SleetVersion)) -ne $null
             Write-Host "##vso[task.setvariable variable=Sleet.SameInstalled;]$sameinstalled"
            displayName: 'Check Sleet installed version'

          - task: DotNetCoreCLI@2
            displayName: 'Uninstall Sleet if necessary'
            continueOnError: true
            condition: and(eq(variables['Sleet.AnyInstalled'], 'True'), eq(variables['Sleet.SameInstalled'], 'False'))
            inputs:
              command: custom
              custom: tool
              arguments: 'uninstall -g Sleet'

          - task: DotNetCoreCLI@2
            displayName: 'Install Sleet if necessary'
            condition: eq(variables['Sleet.SameInstalled'], 'False')
            inputs:
              command: custom
              custom: tool
              arguments: 'install --global Sleet --version $(SleetVersion)'

          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: package

          - script: 'sleet push --config none $(Pipeline.Workspace)/package -f --verbose -p "SLEET_FEED_CONNECTIONSTRING=$(SLEET_FEED_CONNECTIONSTRING)"'
            displayName: 'Push package via Sleet'